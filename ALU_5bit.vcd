$date
	Mon Apr 10 01:16:55 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module ALU_5bit_tb $end
$var wire 1 ! zf $end
$var wire 1 " sf $end
$var wire 1 # cf $end
$var wire 5 $ R [4:0] $end
$var reg 5 % a [4:0] $end
$var reg 5 & b [4:0] $end
$var reg 2 ' op [1:0] $end
$scope module uut $end
$var wire 3 ( _cf [2:0] $end
$var wire 5 ) a [4:0] $end
$var wire 5 * b [4:0] $end
$var wire 2 + op [1:0] $end
$var wire 1 ! zf $end
$var wire 1 " sf $end
$var wire 1 # cf $end
$var wire 3 , _zf [2:0] $end
$var wire 3 - _sf [2:0] $end
$var wire 5 . _R2 [4:0] $end
$var wire 5 / _R1 [4:0] $end
$var wire 5 0 _R0 [4:0] $end
$var wire 5 1 R [4:0] $end
$scope module add $end
$var wire 5 2 a [4:0] $end
$var wire 5 3 b [4:0] $end
$var wire 1 4 cin $end
$var wire 1 5 zf $end
$var wire 1 6 sf $end
$var wire 5 7 s [4:0] $end
$var wire 1 8 cout $end
$var wire 1 9 cf $end
$var wire 5 : c [4:0] $end
$scope module sum0 $end
$var wire 1 ; a $end
$var wire 1 < b $end
$var wire 1 4 cin $end
$var wire 1 = cout $end
$var wire 1 > s $end
$upscope $end
$scope module sum1 $end
$var wire 1 ? a $end
$var wire 1 @ b $end
$var wire 1 A cin $end
$var wire 1 B cout $end
$var wire 1 C s $end
$upscope $end
$scope module sum2 $end
$var wire 1 D a $end
$var wire 1 E b $end
$var wire 1 F cin $end
$var wire 1 G cout $end
$var wire 1 H s $end
$upscope $end
$scope module sum3 $end
$var wire 1 I a $end
$var wire 1 J b $end
$var wire 1 K cin $end
$var wire 1 L cout $end
$var wire 1 M s $end
$upscope $end
$scope module sum4 $end
$var wire 1 N a $end
$var wire 1 O b $end
$var wire 1 P cin $end
$var wire 1 Q cout $end
$var wire 1 R s $end
$upscope $end
$upscope $end
$scope module andd $end
$var wire 5 S a [4:0] $end
$var wire 5 T b [4:0] $end
$var wire 1 U cf $end
$var wire 1 V zf $end
$var wire 5 W z [4:0] $end
$var wire 1 X sf $end
$upscope $end
$scope module flags $end
$var wire 3 Y in0 [2:0] $end
$var wire 3 Z in1 [2:0] $end
$var wire 3 [ in2 [2:0] $end
$var wire 3 \ in3 [2:0] $end
$var wire 3 ] out [2:0] $end
$var wire 2 ^ sel [1:0] $end
$var reg 3 _ _out [2:0] $end
$upscope $end
$scope module result $end
$var wire 5 ` in0 [4:0] $end
$var wire 5 a in1 [4:0] $end
$var wire 5 b in3 [4:0] $end
$var wire 5 c out [4:0] $end
$var wire 2 d sel [1:0] $end
$var wire 5 e in2 [4:0] $end
$var reg 5 f _out [4:0] $end
$upscope $end
$scope module ror $end
$var wire 5 g a [4:0] $end
$var wire 1 h cf $end
$var wire 3 i shift [2:0] $end
$var wire 5 j z [4:0] $end
$var wire 1 k zf $end
$var wire 1 l sf $end
$var reg 5 m _z [4:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b11010 m
1l
0k
b11010 j
b1 i
0h
b10101 g
b110 f
b11010 e
b0 d
b110 c
b0 b
b10001 a
b110 `
b100 _
b0 ^
b100 ]
b0 \
b10 [
b10 Z
b100 Y
1X
b10001 W
0V
0U
b10001 T
b10101 S
0R
1Q
0P
1O
1N
0M
0L
0K
0J
0I
1H
0G
0F
0E
1D
1C
0B
1A
0@
0?
0>
1=
1<
1;
b10001 :
19
18
b110 7
06
05
04
b10001 3
b10101 2
b110 1
b110 0
b10001 /
b11010 .
b110 -
b0 ,
b0 +
b10001 *
b10101 )
b1 (
b0 '
b10001 &
b10101 %
b110 $
1#
0"
0!
$end
#20000
1"
0#
b10 ]
b10 _
b10001 $
b10001 1
b10001 c
b10001 f
b1 '
b1 +
b1 ^
b1 d
#40000
b11010 $
b11010 1
b11010 c
b11010 f
b10 '
b10 +
b10 ^
b10 d
#60000
